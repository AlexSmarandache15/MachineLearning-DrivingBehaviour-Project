# -*- coding: utf-8 -*-
"""DrivingBehaviour.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Q-mOEe-aM6_EE8EvzdFfyQSrUE9-2SE
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

train_data = pd.read_csv("train_motion_data.csv")
features = ['AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ']
#features = ['AccX', 'AccY', 'AccZ']
x_train = train_data[features].dropna()
y_train = train_data['Class']

test_data = pd.read_csv("Test.csv")
x_test = test_data[features].dropna()

# DecisionTreeClassifier
from sklearn.tree import DecisionTreeClassifier
dtree = DecisionTreeClassifier()
dtree = dtree.fit(x_train, y_train)
y_predictions = dtree.predict(x_test)

# RandomForestClassifier
from sklearn.ensemble import RandomForestClassifier
forest_clf= RandomForestClassifier(random_state= 20)
forest_clf = forest_clf.fit(x_train, y_train)
y_predictions = forest_clf.predict(x_test)

# AdaBoostClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
adc_clf = AdaBoostClassifier(n_estimators=10)
#adc_clf = AdaBoostClassifier(estimator=DecisionTreeClassifier(max_depth=3), n_estimators=2, learning_rate=0.8)
adc_clf = adc_clf.fit(x_train, y_train)
y_predictions = adc_clf.predict(x_test)

# MLPClassifier
from sklearn.neural_network import MLPClassifier
mlp_clf = MLPClassifier(early_stopping=True, batch_size=64, verbose=True, 
                        learning_rate_init=0.001, 
                        hidden_layer_sizes=(32, 64, 128), random_state=0)
mlp_clf = mlp_clf.fit(x_train, y_train)
y_predictions = mlp_clf.predict(x_test)

# SVC
from sklearn.svm import SVC
svc = SVC(kernel='rbf')
svc = svc.fit(x_train, y_train)
y_predictions = svc.predict(x_test)

# KNeighborsClassifier
from sklearn.neighbors import KNeighborsClassifier
kn_clf = KNeighborsClassifier()
kn_clf = kn_clf.fit(x_train, y_train)
y_predictions = kn_clf.predict(x_test)

# LGBMClassifier
import lightgbm as lgb
lbgm_clf = lgb.LGBMClassifier(n_estimators=2, num_leaves=4, 
                              min_child_samples=10, learning_rate= 0.1)
lbgm_clf.fit(x_train, y_train)
y_predictions = lbgm_clf.predict(x_test)

# LinearDiscriminantAnalysis
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
lda = LinearDiscriminantAnalysis()
lda.fit(x_train, y_train)
y_predictions = lda.predict(x_test)

# LogisticRegression
from sklearn import linear_model
logr = linear_model.LogisticRegression()
logr.fit(x_train, y_train)
y_predictions = logr.predict(x_test)

# GaussianNB
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(x_train, y_train)
y_predictions = gnb.predict(x_test)

# BernoulliNB
from sklearn.naive_bayes import BernoulliNB
bnb = BernoulliNB()
bnb.fit(x_train, y_train)
y_predictions = bnb.predict(x_test)

# PassiveAggressiveClassifier
from sklearn.linear_model import PassiveAggressiveClassifier
pac = PassiveAggressiveClassifier()
pac.fit(x_train, y_train)
y_predictions = pac.predict(x_test)

# Perceptron
from sklearn.linear_model import Perceptron
per = Perceptron()
per.fit(x_train, y_train)
y_predictions = per.predict(x_test)

# SGDClassifier
from sklearn.linear_model import SGDClassifier
sgdc = SGDClassifier()
sgdc.fit(x_train, y_train)
y_predictions = sgdc.predict(x_test)

# QuadraticDiscriminantAnalysis
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
qda = QuadraticDiscriminantAnalysis()
qda.fit(x_train, y_train)
y_predictions = qda.predict(x_test)

ids = test_data['ID'].dropna()
Final_predictions= pd.DataFrame(y_predictions, columns=['Class'])
Final_predictions.index.name='ID'
Final_predictions.index += 1
Final_predictions= Final_predictions.to_csv(
    'Final_Predictions.csv', header= 'Class', index='true')